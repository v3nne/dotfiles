return {
  -- {
  --   -- `lazydev` configures Lua LSP for your Neovim config, runtime and plugins
  --   -- used for completion, annotations and signatures of Neovim apis
  --   'folke/lazydev.nvim',
  --   ft = 'lua',
  --   opts = {
  --     library = {
  --       -- Load luvit types when the `vim.uv` word is found
  --       { path = '${3rd}/luv/library', words = { 'vim%.uv' } },
  --     },
  --   },
  -- },
  -- {
  --   -- Main LSP Configuration
  --   'neovim/nvim-lspconfig',
  --   dependencies = {
  --     -- Automatically install LSPs and related tools to stdpath for Neovim
  --     -- Mason must be loaded before its dependents so we need to set it up here.
  --     -- NOTE: `opts = {}` is the same as calling `require('mason').setup({})`
  --     { 'mason-org/mason.nvim', opts = {} },
  --     'mason-org/mason-lspconfig.nvim',
  --     'WhoIsSethDaniel/mason-tool-installer.nvim',
  --
  --     -- Useful status updates for LSP.
  --     {
  --       'j-hui/fidget.nvim',
  --       opts = {
  --       notification = {
  --         window = { winblend = 0 }
  --       }}
  --     },
  --
  --     -- Allows extra capabilities provided by blink.cmp
  --     'saghen/blink.cmp',
  --   },
  --   opts = {
  --     servers = {
  --       -- lua_ls = {
  --       --   settings = {
  --       --     Lua = {
  --       --       completion = {
  --       --         callSnippet = 'Replace',
  --       --       },
  --       --     },
  --       --   },
  --       -- },
  --       bashls = {},
  --       nil_ls = {},
  --       yamlls = {},
  --       terraformls = {},
  --       postgres_lsp = {},
  --       dockerls = {},
  --       tailwindcss = {},
  --       ts_ls = {},
  --       html = {},
  --       cssls = {},
  --       jsonls = {},
  --       eslint = {},
  --     },
  --     styles = { border = "single" },
  --   },
  --   config = function(_, opts)
  --     --  This function gets run when an LSP attaches to a particular buffer.
  --     --  That is to say, every time a new file is opened that is associated with
  --     --  an lsp (for example, opening `main.rs` is associated with `rust_analyzer`) this
  --     --  function will be executed to configure the current buffer
  --     vim.api.nvim_create_autocmd('LspAttach', {
  --       group = vim.api.nvim_create_augroup('kickstart-lsp-attach', { clear = true }),
  --       callback = function(event)
  --         -- NOTE: Remember that Lua is a real programming language, and as such it is possible
  --         -- to define small helper and utility functions so you don't have to repeat yourself.
  --         --
  --         -- In this case, we create a function that lets us more easily define mappings specific
  --         -- for LSP related items. It sets the mode, buffer and description for us each time.
  --         local map = function(keys, func, desc, mode)
  --           mode = mode or 'n'
  --           vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = 'LSP: ' .. desc })
  --         end
  --
  --         map("K", function() vim.lsp.buf.hover(opts.styles) end, "Hover Documentation")
  --         map("D", function() vim.diagnostic.open_float(opts.styles) end, "Diagnostic Message")
  --
  --         map("gd", vim.lsp.buf.definition,          "Goto Definition")
  --         map("gD", vim.lsp.buf.declaration,         "Goto Declaration")
  --         map("gr", vim.lsp.buf.references,          "Find References")
  --         map("<leader>rn", vim.lsp.buf.rename,      "Rename Variable")
  --         map("<leader>ca", vim.lsp.buf.code_action, "Code Action", {"n", "v"})
  --
  --         -- Jump to the implementation of the word under your cursor.
  --         --  Useful when your language has ways of declaring types without an actual implementation.
  --         -- map('gri', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementation')
  --
  --         -- Fuzzy find all the symbols in your current document.
  --         --  Symbols are things like variables, functions, types, etc.
  --         -- map('gO', require('telescope.builtin').lsp_document_symbols, 'Open Document Symbols')
  --
  --         -- Fuzzy find all the symbols in your current workspace.
  --         --  Similar to document symbols, except searches over your entire project.
  --         -- map('gW', require('telescope.builtin').lsp_dynamic_workspace_symbols, 'Open Workspace Symbols')
  --
  --         -- Jump to the type of the word under your cursor.
  --         --  Useful when you're not sure what type a variable is and you want to see
  --         --  the definition of its *type*, not where it was *defined*.
  --         -- map('grt', require('telescope.builtin').lsp_type_definitions, '[G]oto [T]ype Definition')
  --
  --         -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
  --
  --         -- The following two autocommands are used to highlight references of the
  --         -- word under your cursor when your cursor rests there for a little while.
  --         --    See `:help CursorHold` for information about when this is executed
  --         --
  --         -- When you move your cursor, the highlights will be cleared (the second autocommand).
  --         local client = vim.lsp.get_client_by_id(event.data.client_id)
  --         local highlight_augroup = vim.api.nvim_create_augroup('kickstart-lsp-highlight', { clear = false })
  --         vim.api.nvim_create_autocmd({ 'CursorHold', 'CursorHoldI' }, {
  --           buffer = event.buf,
  --           group = highlight_augroup,
  --           callback = vim.lsp.buf.document_highlight,
  --         })
  --
  --         vim.api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {
  --           buffer = event.buf,
  --           group = highlight_augroup,
  --           callback = vim.lsp.buf.clear_references,
  --         })
  --
  --         vim.api.nvim_create_autocmd('LspDetach', {
  --           group = vim.api.nvim_create_augroup('kickstart-lsp-detach', { clear = true }),
  --           callback = function(event2)
  --             vim.lsp.buf.clear_references()
  --             vim.api.nvim_clear_autocmds { group = 'kickstart-lsp-highlight', buffer = event2.buf }
  --           end,
  --         })
  --
  --         -- The following code creates a keymap to toggle inlay hints in your
  --         -- code, if the language server you are using supports them
  --         --
  --         -- This may be unwanted, since they displace some of your code
  --         -- if client and client_supports_method(client, vim.lsp.protocol.Methods.textDocument_inlayHint, event.buf) then
  --         --   map('<leader>th', function()
  --         --     vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled { bufnr = event.buf })
  --         --   end, '[T]oggle Inlay [H]ints')
  --         -- end
  --       end,
  --     })
  --
  --     -- Diagnostic Config
  --     -- See :help vim.diagnostic.Opts
  --     vim.diagnostic.config {
  --       severity_sort = true,
  --       float = { border = 'single', source = 'if_many' },
  --       underline = { severity = vim.diagnostic.severity.ERROR },
  --       signs = vim.g.have_nerd_font and {
  --         text = {
  --           [vim.diagnostic.severity.ERROR] = '󰅚 ',
  --           [vim.diagnostic.severity.WARN] = '󰀪 ',
  --           [vim.diagnostic.severity.INFO] = '󰋽 ',
  --           [vim.diagnostic.severity.HINT] = '󰌶 ',
  --         },
  --       } or {},
  --       virtual_text = {
  --         source = 'if_many',
  --         spacing = 2,
  --         format = function(diagnostic)
  --           local diagnostic_message = {
  --             [vim.diagnostic.severity.ERROR] = diagnostic.message,
  --             [vim.diagnostic.severity.WARN] = diagnostic.message,
  --             [vim.diagnostic.severity.INFO] = diagnostic.message,
  --             [vim.diagnostic.severity.HINT] = diagnostic.message,
  --           }
  --           return diagnostic_message[diagnostic.severity]
  --         end,
  --       },
  --     }
  --
  --     -- LSP servers and clients are able to communicate to each other what features they support.
  --     --  By default, Neovim doesn't support everything that is in the LSP specification.
  --     --  When you add blink.cmp, luasnip, etc. Neovim now has *more* capabilities.
  --     --  So, we create new capabilities with blink.cmp, and then broadcast that to the servers.
  --     local capabilities = require('blink.cmp').get_lsp_capabilities()
  --
  --     -- Enable the following language servers
  --     --  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
  --     --
  --     --  Add any additional override configuration in the following tables. Available keys are:
  --     --  - cmd (table): Override the default command used to start the server
  --     --  - filetypes (table): Override the default list of associated filetypes for the server
  --     --  - capabilities (table): Override fields in capabilities. Can be used to disable certain LSP features.
  --     --  - settings (table): Override the default settings passed when initializing the server.
  --     --        For example, to see the options for `lua_ls`, you could go to: https://luals.github.io/wiki/settings/
  --     local 
  --
  --     -- Ensure the servers and tools above are installed
  --     --
  --     -- To check the current status of installed tools and/or manually install
  --     -- other tools, you can run
  --     --    :Mason
  --     --
  --     -- You can press `g?` for help in this menu.
  --     --
  --     -- `mason` had to be setup earlier: to configure its options see the
  --     -- `dependencies` table for `nvim-lspconfig` above.
  --     --
  --     -- You can add other tools here that you want Mason to install
  --     -- for you, so that they are available from within Neovim.
  --     local ensure_installed = vim.tbl_keys(servers or {})
  --     vim.list_extend(ensure_installed, {
  --       'stylua', -- Used to format Lua code
  --     })
  --     require('mason-tool-installer').setup { ensure_installed = ensure_installed }
  --
  --     require('mason-lspconfig').setup {
  --       ensure_installed = {}, -- explicitly set to an empty table (Kickstart populates installs via mason-tool-installer)
  --       automatic_installation = false,
  --       handlers = {
  --         function(server_name)
  --           local server = servers[server_name] or {}
  --           -- This handles overriding only values explicitly passed
  --           -- by the server configuration above. Useful when disabling
  --           -- certain features of an LSP (for example, turning off formatting for ts_ls)
  --           server.capabilities = vim.tbl_deep_extend('force', {}, capabilities, server.capabilities or {})
  --           require('lspconfig')[server_name].setup(server)
  --         end,
  --       },
  --     }
  --   end,
  -- },
  --
  -- { -- Autoformat
  --   'stevearc/conform.nvim',
  --   event = { 'BufWritePre' },
  --   cmd = { 'ConformInfo' },
  --   keys = {
  --     {
  --       '<leader>f',
  --       function()
  --         require('conform').format { async = true, lsp_format = 'fallback' }
  --       end,
  --       mode = '',
  --       desc = '[F]ormat buffer',
  --     },
  --   },
  --   opts = {
  --     notify_on_error = false,
  --     format_on_save = function(bufnr)
  --       -- Disable "format_on_save lsp_fallback" for languages that don't
  --       -- have a well standardized coding style. You can add additional
  --       -- languages here or re-enable it for the disabled ones.
  --       local disable_filetypes = { c = true, cpp = true }
  --       if disable_filetypes[vim.bo[bufnr].filetype] then
  --         return nil
  --       else
  --         return {
  --           timeout_ms = 500,
  --           lsp_format = 'fallback',
  --         }
  --       end
  --     end,
  --     formatters_by_ft = {
  --       lua = { 'stylua' },
  --       -- Conform can also run multiple formatters sequentially
  --       -- python = { "isort", "black" },
  --       --
  --       -- You can use 'stop_after_first' to run the first available formatter from the list
  --       -- javascript = { "prettierd", "prettier", stop_after_first = true },
  --     },
  --   },
  -- },
}
