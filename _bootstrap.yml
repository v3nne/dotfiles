---
- name: Machine setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
    
  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Install packages
      ansible.builtin.pacman:
        name:
          ### Desktop Environment ###
          - i3-gaps
          - picom
          - feh

          ### Dev Tools ###
          - kitty
          - ripgrep
          - zsh
          - fzf
          - tmux
          - fd
          - bat
          - yazi
          - lazygit
          - neovim
          - imagemagick # snacks.image dependency (nvim)
          - tree

          ### CLI tools ###
          - btop
          - fastfetch
          # - tealdeer
          - yt-dlp # YouTube (and other sites) to MP3
          - jq # json query (parser)
          - yq # yaml query (parer)
          - ffmpeg # Complete solution to record, convert and stream audio and video
          - termusic # music player TUI
          - rmpc # music player TUI (mpd)
          - mpc # mpd client
          - id3v2 # cli tool for adding meta data to sound tracks

          ### Other ###
          - mpv
          - vlc
          - obsidian
          - libreoffice

        state: present
        update_cache: true
        extra_args:
          - --noconfirm
          - --needed

    - name: Install AUR packages via yay (as normal user)
      become: true
      become_user: "{{ remote_regular_user }}"
      # environment:
        # ensure yay uses the right home directory
        # HOME: "/home/{{ remote_regular_user }}"
      # args:
        # run from the userâ€™s home so that ~/.cache/yay is writable
        # chdir: "/home/{{ remote_regular_user }}"
      ansible.builtin.shell: >
        touch yay_ansible.txt && echo "$(whoami)" >> yay_ansible.txt


    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh


    # - name: Add Docker repo
    #   ansible.builtin.yum_repository:
    #     name: docker
    #     description: Docker repo
    #     baseurl: "https://download.docker.com/linux/fedora/{{ ansible_distribution_major_version }}/{{ ansible_architecture }}/stable"
    #     gpgkey: "https://download.docker.com/linux/fedora/gpg"
    #     gpgcheck: true
    #     enabled: true
    #
    # - name: Install Docker
    #   ansible.builtin.dnf:
    #     name:
    #       - docker-ce
    #       - docker-ce-cli
    #       - containerd.io
    #       - docker-buildx-plugin
    #       - docker-compose-plugin
    #     state: present
    #
    # - name: Add Docker group
    #   ansible.builtin.group:
    #     name: docker
    #     state: present
    #
    # - name: Add user to docker group
    #   ansible.builtin.user:
    #     name: "{{ remote_regular_user }}"
    #     groups: docker
    #     append: true

    # - name: Add kubectl repo
    #   ansible.builtin.yum_repository:
    #     name: Kubernetes
    #     description: Kubernetes repo
    #     baseurl: https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
    #     gpgkey: https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
    #     gpgcheck: true
    #     enabled: true
    #
    # - name: Install kubectl
    #   ansible.builtin.dnf:
    #     name: kubectl
    #     state: present
    #
    # - name: Add Hashicorp Repo
    #   ansible.builtin.yum_repository:
    #     name: hashicorp
    #     description: Hashicorp repo
    #     baseurl: https://rpm.releases.hashicorp.com/fedora/$releasever/$basearch/stable
    #     gpgkey: https://rpm.releases.hashicorp.com/gpg
    #     gpgcheck: true
    #     enabled: true
    #
    # - name: Install Terraform
    #   ansible.builtin.dnf:
    #     name: terraform
    #     state: present
    #
    # - name: Check if Pulumi is installed
    #   ansible.builtin.command:
    #     cmd: pulumi version
    #   register: pulumi_installed
    #   ignore_errors: true
    #   changed_when: false
    #
    # - name: Download Pulumi SDK
    #   ansible.builtin.get_url:
    #     url: "https://get.pulumi.com/releases/sdk/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     dest: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     mode: "0644"
    #   when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)
    #
    # - name: Extract Pulumi to /usr/local/bin
    #   ansible.builtin.unarchive:
    #     src: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     dest: /usr/local/bin
    #     extra_opts: [--strip-components=1]
    #     creates: /usr/local/bin/pulumi
    #   when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)

    # - name: Install Flatpak packages
    #   community.general.flatpak:
    #     name:
    #       - com.obsproject.Studio
    #       - org.videolan.VLC
    #       - org.tenacityaudio.Tenacity
    #       - md.obsidian.Obsidian
    #       - org.gimp.GIMP
    #       - rest.insomnia.Insomnia
    #       - com.github.johnfactotum.Foliate
    #       - org.gnome.meld
    #       - org.sqlitebrowser.sqlitebrowser
    #     state: present

    # - name: Ensure fonts directory
    #   ansible.builtin.file:
    #     path: "~{{ remote_regular_user }}/.fonts"
    #     state: directory
    #     mode: "0755"
    #     owner: "{{ remote_regular_user }}"
    #
    # - name: Check if Jetbrains Mono exists
    #   ansible.builtin.shell: "ls ~{{ remote_regular_user }}/.fonts/JetBrainsMonoNerd*FontMono*"
    #   register: jetbrains_mono_exists
    #   ignore_errors: true
    #   changed_when: false
    #
    # - name: Download Jetbrains mono
    #   when: jetbrains_mono_exists is failed
    #   ansible.builtin.unarchive:
    #     src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
    #     dest: "~{{ remote_regular_user }}/.fonts/"
    #     remote_src: true
    #     mode: "0755"
    #     owner: "{{ remote_regular_user }}"

